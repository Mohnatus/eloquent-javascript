// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split(/[\\/]/);
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"eloquent-javascript": {
		"2-browser": {
			"15-platform-game": {
				"js": {
					"actors": {
						"actor.js": function (exports, module, require) {
							const Vector = require('../models/vector');
							
							class Actor {
							    constructor(pos, constants) {
							        this.type = constants.type;
							        this.basePos = this.pos = pos.plus(new Vector(constants.xOffset, constants.yOffset));
							        this.size = new Vector(constants.xSize, constants.ySize);
							    }
							
							    act(step, level, keys) {
							
							    }
							}
							
							module.exports = Actor;
						},
						"coin.js": function (exports, module, require) {
							const Actor = require('./actor');
							const Vector = require('../models/vector');
							const constants = require('../data/constants').coin;
							
							class Coin extends Actor {
							    constructor(pos) {
							        super(pos, constants);
							        this.wobble = Math.random() * Math.PI * 2;
							    }
							
							    act(step) {
							        this.wobble += step * constants.wobbleSpeed;
							        var wobblePos = Math.sin(this.wobble) * constants.wobbleDist;
							        this.pos = this.basePos.plus(new Vector(0, wobblePos));
							    }
							}
							
							module.exports = Coin;
						},
						"lava.js": function (exports, module, require) {
							const Actor = require('./actor');
							const Vector = require('../models/vector');
							const constants = require('../data/constants').lava;
							
							class Lava extends Actor {
							    constructor(pos, char) {
							        super(pos, constants);
							
							        let speed = constants.speed[char];
							        this.speed = new Vector(speed.x, speed.y);
							
							        if (char == constants.symbols.drop) {
							            this.repeatPos = pos;
							        } 
							    }
							
							    act(step, level) {
							        var newPos = this.pos.plus(this.speed.times(step));
							        if (!level.obstacleAt (newPos, this.size))
							            this.pos = newPos;
							        else if (this.repeatPos)
							            this.pos = this.repeatPos;
							        else
							            this.speed = this.speed.times(-1);
							    }
							}
							
							module.exports = Lava;
						},
						"player.js": function (exports, module, require) {
							const Actor = require('./actor');
							const Vector = require('../models/vector');
							const { player, statuses } = require('../data/constants');
							
							class Player extends Actor {
							    constructor(pos) {
							        super(pos, player);
							        
							        this.speed = new Vector(0, 0);
							    }
							
							    moveX(step, level, keys) {
							        this.speed.x = 0;
							
							        if (keys.left) this.speed.x -= player.xSpeed;
							        if (keys.right) this.speed.x += player.xSpeed;
							
							        var motion = new Vector(this.speed.x * step, 0);
							        var newPos = this.pos.plus(motion);
							        var obstacle = level.obstacleAt(newPos, this.size);
							        if (obstacle)
							            level.playerTouched(obstacle);
							        else
							            this.pos = newPos;
							    }
							
							    moveY(step, level, keys) {
							        this.speed.y += step * player.gravity;
							        var motion = new Vector(0, this.speed.y * step);
							        var newPos = this.pos.plus(motion);
							        var obstacle = level.obstacleAt(newPos, this.size);
							        if (obstacle) {
							          level.playerTouched(obstacle);
							          if (keys.up && this.speed.y > 0)
							            this.speed.y = -player.jumpSpeed;
							          else
							            this.speed.y = 0;
							        } else {
							          this.pos = newPos;
							        } 
							    }
							
							    act(step, level, keys) {
							        this.moveX(step, level, keys);
							        this.moveY(step, level, keys);
							
							        var otherActor = level.actorAt(this);
							        if (otherActor)
							            level.playerTouched(otherActor.type, otherActor);
							
							        if (level.status == statuses.lost) {
							            this.pos.y += step;
							            this.size.y -= step;
							        }
							    }
							}
							
							module.exports = Player;
						}
					},
					"data": {
						"chars.js": function (exports, module, require) {
							const Player = require('../actors/player');
							const Coin = require('../actors/coin');
							const Lava = require('../actors/lava');
							
							const actorChars = {
							    '@': Player,
							    'o': Coin,
							    '=': Lava,
							    '|': Lava,
							    'v': Lava
							};
							
							const WALL = 'wall';
							const LAVA = 'lava';
							
							const staticChars = {
							    'x': WALL,
							    '!': LAVA
							};
							
							
							
							module.exports = { actorChars, staticChars, WALL, LAVA };
						},
						"constants.js": function (exports, module, require) {
							module.exports = {
							
							    statuses: {
							        "win": "win",
							        "lost": "lost"
							    },
							    
							    level: {
							        maxStep: 0.05,
							    },
							
							    coin: {
							        type: "coin",
							        wobbleSpeed: 8,
							        wobbleDist: 0.07,
							        xOffset: 0.2,
							        yOffset: 0.1,
							        xSize: 0.6,
							        ySize: 0.6
							    },
							
							    lava: {
							        type: "lava",
							        xOffset: 0,
							        yOffset: 0,
							        xSize: 1,
							        ySize: 1,
							        symbols: {
							            "horizontal": "=",
							            "vertical": "|",
							            "drop": "v"
							        },
							        speed: {
							            "=": {x: 2, y: 0},
							            "|": {x: 0, y: 2},
							            "v": {x: 0, y: 3}
							        }
							    },
							
							    player: {
							        startLivesCount: 3,
							        type: "player",
							        xSpeed: 7,
							        gravity: 30,
							        jumpSpeed: 17,
							        xOffset: 0,
							        yOffset: -0.5,
							        xSize: 0.8, 
							        ySize: 1.5,
							        statuses: {
							            lost: "lost"
							        }
							    }
							    
							}
						},
						"map.js": function (exports, module, require) {
							/*
							@ - игрок
							o - монеты
							x - стены
							! - фиксированная лава
							= - движущаяся лава
							| - лава, двигающаяся по вертикали
							v - капающая лава
							*/
							
							const level1 = [
							    "                                                                                ",
							    "                                                                                ",
							    "                                                                                ",
							    "                                                                                ",
							    "                                                                                ",
							    "                                                                                ",
							    "                                                                  xxx           ",
							    "                                                   xx      xx    xx!xx          ",
							    "                                    o o      xx                  x!!!x          ",
							    "                                                                 xx!xx          ",
							    "                                   xxxxx                          xvx           ",
							    "                                                                            xx  ",
							    "  xx                                      o o                                x  ",
							    "  x                     o                                                    x  ",
							    "  x                                      xxxxx                             o x  ",
							    "  x          xxxx       o                                                    x  ",
							    "  x  @       x  x                                                xxxxx       x  ",
							    "  xxxxxxxxxxxx  xxxxxxxxxxxxxxx   xxxxxxxxxxxxxxxxxxxx     xxxxxxx   xxxxxxxxx  ",
							    "                              x   x                  x     x                    ",
							    "                              x!!!x                  x!!!!!x                    ",
							    "                              x!!!x                  x!!!!!x                    ",
							    "                              xxxxx                  xxxxxxx                    ",
							    "                                                                                ",
							    "                                                                                "
							];
							
							const level2 = [
							    "                                      x!!x                        xxxxxxx                                    x!x  ",
							    "                                      x!!x                     xxxx     xxxx                                 x!x  ",
							    "                                      x!!xxxxxxxxxx           xx           xx                                x!x  ",
							    "                                      xx!!!!!!!!!!xx         xx             xx                               x!x  ",
							    "                                       xxxxxxxxxx!!x         x                                    o   o   o  x!x  ",
							    "                                                xx!x         x     o   o                                    xx!x  ",
							    "                                                 x!x         x                                xxxxxxxxxxxxxxx!!x  ",
							    "                                                 xvx         x     x   x                        !!!!!!!!!!!!!!xx  ",
							    "                                                             xx  |   |   |  xx            xxxxxxxxxxxxxxxxxxxxx   ",
							    "                                                              xx!!!!!!!!!!!xx            v                        ",
							    "                                                               xxxx!!!!!xxxx                                      ",
							    "                                               x     x            xxxxxxx        xxx         xxx                  ",
							    "                                               x     x                           x x         x x                  ",
							    "                                               x     x                             x         x                    ",
							    "                                               x     x                             xx        x                    ",
							    "                                               xx    x                             x         x                    ",
							    "                                               x     x      o  o     x   x         x         x                    ",
							    "               xxxxxxx        xxx   xxx        x     x               x   x         x         x                    ",
							    "              xx     xx         x   x          x     x     xxxxxx    x   x   xxxxxxxxx       x                    ",
							    "             xx       xx        x o x          x    xx               x   x   x               x                    ",
							    "     @       x         x        x   x          x     x               x   x   x               x                    ",
							    "    xxx      x         x        x   x          x     x               x   xxxxx   xxxxxx      x                    ",
							    "    x x      x         x       xx o xx         x     x               x     o     x x         x                    ",
							    "!!!!x x!!!!!!x         x!!!!!!xx     xx!!!!!!!!xx    x!!!!!!!!!!     x     =     x x         x                    ",
							    "!!!!x x!!!!!!x         x!!!!!xx       xxxxxxxxxx     x!!!!!!!xx!     xxxxxxxxxxxxx xx  o o  xx                    ",
							    "!!!!x x!!!!!!x         x!!!!!x    o                 xx!!!!!!xx !                    xx     xx                     ",
							    "!!!!x x!!!!!!x         x!!!!!x                     xx!!!!!!xx  !                     xxxxxxx                      ",
							    "!!!!x x!!!!!!x         x!!!!!xx       xxxxxxxxxxxxxx!!!!!!xx   !                                                  ",
							    "!!!!x x!!!!!!x         x!!!!!!xxxxxxxxx!!!!!!!!!!!!!!!!!!xx    !                                                  ",
							    "!!!!x x!!!!!!x         x!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!xx     !                                                  "
							];
							
							const level3 = [
							    "                                                                                                              ",
							    "                                                                                                              ",
							    "                                                                                                              ",
							    "                                                                                                              ",
							    "                                                                                                              ",
							    "                                        o                                                                     ",
							    "                                                                                                              ",
							    "                                        x                                                                     ",
							    "                                        x                                                                     ",
							    "                                        x                                                                     ",
							    "                                        x                                                                     ",
							    "                                       xxx                                                                    ",
							    "                                       x x                 !!!        !!!  xxx                                ",
							    "                                       x x                 !x!        !x!                                     ",
							    "                                     xxx xxx                x          x                                      ",
							    "                                      x   x                 x   oooo   x       xxx                            ",
							    "                                      x   x                 x          x      x!!!x                           ",
							    "                                      x   x                 xxxxxxxxxxxx       xxx                            ",
							    "                                     xx   xx      x   x      x                                                ",
							    "                                      x   xxxxxxxxx   xxxxxxxx              x x                               ",
							    "                                      x   x           x                    x!!!x                              ",
							    "                                      x   x           x                     xxx                               ",
							    "                                     xx   xx          x                                                       ",
							    "                                      x   x= = = =    x            xxx                                        ",
							    "                                      x   x           x           x!!!x                                       ",
							    "                                      x   x    = = = =x     o      xxx       xxx                              ",
							    "                                     xx   xx          x                     x!!!x                             ",
							    "                              o   o   x   x           x     x                xxv        xxx                   ",
							    "                                      x   x           x              x                 x!!!x                  ",
							    "                             xxx xxx xxx xxx     o o  x!!!!!!!!!!!!!!x                   vx                   ",
							    "                             x xxx x x xxx x          x!!!!!!!!!!!!!!x                                        ",
							    "                             x             x   xxxxxxxxxxxxxxxxxxxxxxx                                        ",
							    "                             xx           xx                                         xxx                      ",
							    "  xxx                         x     x     x                                         x!!!x                xxx  ",
							    "  x x                         x    xxx    x                                          xxx                 x x  ",
							    "  x                           x    xxx    xxxxxxx                        xxxxx                             x  ",
							    "  x                           x           x                              x   x                             x  ",
							    "  x                           xx          x                              x x x                             x  ",
							    "  x                                       x       |xxxx|    |xxxx|     xxx xxx                             x  ",
							    "  x                xxx             o o    x                              x         xxx                     x  ",
							    "  x               xxxxx       xx          x                             xxx       x!!!x          x         x  ",
							    "  x               oxxxo       x    xxx    x                             x x        xxx          xxx        x  ",
							    "  x                xxx        xxxxxxxxxxxxx  x oo x    x oo x    x oo  xx xx                    xxx        x  ",
							    "  x      @          x         x           x!!x    x!!!!x    x!!!!x    xx   xx                    x         x  ",
							    "  xxxxxxxxxxxxxxxxxxxxxxxxxxxxx           xxxxxxxxxxxxxxxxxxxxxxxxxxxxx     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  ",
							    "                                                                                                              ",
							    "                                                                                                              "
							];
							
							const level4 = [
							    "                                                                                                  xxx x       ",
							    "                                                                                                      x       ",
							    "                                                                                                  xxxxx       ",
							    "                                                                                                  x           ",
							    "                                                                                                  x xxx       ",
							    "                          o                                                                       x x x       ",
							    "                                                                                             o o oxxx x       ",
							    "                   xxx                                                                                x       ",
							    "       !  o  !                                                xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx       ",
							    "       x     x                                                x   x x   x x   x x   x x   x x   x x           ",
							    "       x= o  x            x                                   xxx x xxx x xxx x xxx x xxx x xxx x xxxxx       ",
							    "       x     x                                                  x x   x x   x x   x x   x x   x x     x       ",
							    "       !  o  !            o                                  xxxx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxxxx       ",
							    "                                                                                                              ",
							    "          o              xxx                              xx                                                  ",
							    "                                                                                                              ",
							    "                                                                                                              ",
							    "                                                      xx                                                      ",
							    "                   xxx         xxx                                                                            ",
							    "                                                                                                              ",
							    "                          o                                                     x      x                      ",
							    "                                                          xx     xx                                           ",
							    "             xxx         xxx         xxx                                 x                  x                 ",
							    "                                                                                                              ",
							    "                                                                 ||                                           ",
							    "  xxxxxxxxxxx                                                                                                 ",
							    "  x         x o xxxxxxxxx o xxxxxxxxx o xx                                                x                   ",
							    "  x         x   x       x   x       x   x                 ||                  x     x                         ",
							    "  x  @      xxxxx   o   xxxxx   o   xxxxx                                                                     ",
							    "  xxxxxxx                                     xxxxx       xx     xx     xxx                                   ",
							    "        x=                  =                =x   x                     xxx                                   ",
							    "        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   x!!!!!!!!!!!!!!!!!!!!!xxx!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
							    "                                                  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
							    "                                                                                                              "
							];
							
							module.exports = [
							    level1, level2, level3, level4
							]
						}
					},
					"draw": {
						"display.js": function (exports, module, require) {
							const createEl = (name, className) => {
							    let el = document.createElement(name);
							    if (className) el.className = className;
							    return el;
							}
							
							const scale = 20;
							
							class DOMDisplay {
							    constructor(parent) {
							        this.parent = parent;
							
							        this.$lives = this.parent.appendChild(createEl('div', 'lives'));
							        this.$level = this.parent.appendChild(createEl('div', 'level'))
							    }
							
							    setLevel(level) {
							        this.wrap = this.parent.appendChild(createEl('div', 'game'));
							        this.level = level;
							
							        this.wrap.appendChild(this.drawBackground());
							        this.actorLayer = null;
							        this.drawFrame();
							    }
							
							    drawBackground() {
							        let table = createEl('table', 'background');
							        table.style.width = this.level.width * scale + 'px';
							        this.level.grid.forEach(row => {
							            let rowEl = table.appendChild(createEl('tr'));
							            rowEl.style.height = scale + 'px';
							            row.forEach(type => {
							                rowEl.appendChild(createEl('td', type));
							            });
							        });
							        return table;
							    }
							
							    drawActors() {
							        let wrap = createEl('div');
							        this.level.actors.forEach(actor => {
							            let rect = wrap.appendChild(createEl('div', 'actor ' + actor.type));
							            rect.style.width = actor.size.x * scale + 'px';
							            rect.style.height = actor.size.y * scale + 'px';
							
							            rect.style.left = actor.pos.x * scale + 'px';
							            rect.style.top = actor.pos.y * scale + 'px';
							        });
							        return wrap;
							    }
							
							    drawFrame() {
							        if (this.actorLayer) {
							            this.wrap.removeChild(this.actorLayer);
							        }
							        this.actorLayer = this.wrap.appendChild(this.drawActors());
							        this.wrap.className = "game " + (this.level.status || "");
							        this.scrollPlayerIntoView();
							    }
							
							    scrollPlayerIntoView() {
							        let width = this.wrap.clientWidth;
							        let height = this.wrap.clientHeight;
							        let margin = width / 3;
							
							        let left = this.wrap.scrollLeft,
							            right = left + width,
							            top = this.wrap.scrollTop,
							            bottom = top + height;
							
							        let player = this.level.player;
							        let center = player.pos.plus(player.size.times(0.5)).times(scale);
							
							        if (center.x < left + margin) {
							            this.wrap.scrollLeft = center.x - margin;
							        } else if (center.x > right - margin) {
							            this.wrap.scrollLeft = center.x + margin - width;
							        } 
							
							        if (center.y < top + margin)
							            this.wrap.scrollTop = center.y - margin;
							        else if (center.y > bottom - margin)
							            this.wrap.scrollTop = center.y + margin - height;
							    }
							
							    showLives(count) {
							        this.$lives.textContent = count;
							    }
							
							    showLevel(level) {
							        this.$level.textContent = level;
							    }
							
							    clear() {
							        this.wrap.parentNode.removeChild(this.wrap);
							    }
							}
							
							module.exports = DOMDisplay;
						},
						"trackKeys.js": function (exports, module, require) {
							const codes = {
							    37: "left", 
							    38: "up", 
							    39: "right"
							};
							
							const pressed = Object.create(null);
							
							function handler(event) {
							    if (codes.hasOwnProperty(event.keyCode)) {
							        const down = event.type == "keydown";
							        pressed[codes[event.keyCode]] = down;
							        event.preventDefault();
							    }
							}
							
							function listen() {
							    addEventListener("keydown", handler);
							    addEventListener("keyup", handler);
							}
							
							function stop() {
							    removeEventListener("kyedown", handler);
							    removeEventListener("keyup", handler);
							}
							
							function getPressed() {
							    return pressed;
							}
							
							getPressed.listen = listen;
							getPressed.stop = stop;
							
							
							module.exports = getPressed;
						}
					},
					"game": {
						"game.js": function (exports, module, require) {
							const DOMDisplay = require('../draw/display');
							const map = require('../data/map');
							const runGame = require('./run');
							
							runGame(map, DOMDisplay)
						},
						"level.js": function (exports, module, require) {
							const Vector = require('../models/vector');
							const constants = require('../data/constants');
							const { actorChars, staticChars, WALL, LAVA } = require('../data/chars.js');
							
							const maxStep = constants.level.maxStep;
							
							class Level {
							    constructor(map) {
							        this.map = map;
							
							        this.width = map[0].length;
							        this.height = map.length;
							        this.grid = [];
							        this.actors = [];
							
							        this.createGrid();
							
							        this.player = this.actors.filter((actor) => {
							            return actor.type == constants.player.type;
							        })[0];
							
							        this.status = null;
							        this.finishDelay = null;
							    }
							
							    createGrid() {
							        for (let y = 0; y < this.height; y++) {
							            let line = this.map[y];
							            let gridLine = [];
							
							            for (let x = 0; x < this.width; x++) {
							                let char = line[x];
							                let fieldType = null;
							
							                let Actor = actorChars[char];
							
							                if (Actor)
							                    this.actors.push(new Actor(new Vector(x, y), char));
							                else if (char in staticChars)
							                    fieldType = staticChars[char];
							
							                gridLine.push(fieldType);
							            }
							
							            this.grid.push(gridLine);
							        }
							    }
							
							    isFinished() {
							        return this.status != null && this.finishDelay < 0;
							    }
							
							    obstacleAt(pos, size) {
							        let xStart = Math.floor(pos.x);
							        let xEnd = Math.ceil(pos.x + size.x);
							
							        let yStart = Math.floor(pos.y);
							        let yEnd = Math.ceil(pos.y + size.y);
							
							        if (xStart < 0 || xEnd > this.width || yStart < 0)
							            return WALL;
							        if (yEnd > this.height)
							            return LAVA;
							
							        for (var y = yStart; y < yEnd; y++) {
							            for (var x = xStart; x < xEnd; x++) {
							                var fieldType = this.grid[y][x];
							                if (fieldType) return fieldType;
							            }
							        }
							    }
							
							    actorAt(actor) {
							        for (var i = 0; i < this.actors.length; i++) {
							            var other = this.actors[i];
							            if (other != actor &&
							                actor.pos.x + actor.size.x > other.pos.x &&
							                actor.pos.x < other.pos.x + other.size.x &&
							                actor.pos.y + actor.size.y > other.pos.y &&
							                actor.pos.y < other.pos.y + other.size.y)
							                return other;
							        }
							    }
							
							    animate(step, keys) {
							        if (this.status != null)
							            this.finishDelay -= step;
							
							        while (step > 0) {
							            var thisStep = Math.min(step, maxStep);
							            this.actors.forEach(function(actor) {
							                actor.act(thisStep, this, keys);
							            }, this);
							            step -= thisStep;
							        }
							    }
							
							    playerTouched(type, actor) {
							        if (type == LAVA && this.status == null) {
							            this.status = constants.statuses.lost;
							            this.finishDelay = 1;
							        } else if (type == constants.coin.type) {
							            this.actors = this.actors.filter(function(other) {
							                return other != actor;
							            });
							            if (!this.actors.some(function(actor) {
							                return actor.type == constants.coin.type;
							            })) {
							                this.status = constants.statuses.win;
							                this.finishDelay = 1;
							            }
							        }
							    }
							}
							
							module.exports = Level;
						},
						"run.js": function (exports, module, require) {
							const trackKeys = require('../draw/trackKeys');
							const pressed = trackKeys();
							
							const Level = require('./level');
							const constants = require('../data/constants');
							
							function runAnimation(frameFunc) {
							  let lastTime = null;
							  function frame(time) {
							    let stop = false;
							    if (lastTime != null) {
							      let timeStep = Math.min(time - lastTime, 100) / 1000;
							      stop = frameFunc(timeStep) === false;
							    }
							    lastTime = time;
							    if (!stop)
							      requestAnimationFrame(frame);
							  }
							  requestAnimationFrame(frame);
							}
							
							function runLevel(level, display, andThen) {
							  display.setLevel(level);
							
							  let pause = false;
							
							  const step = function(step) {
							    level.animate(step, pressed);
							    display.drawFrame(step);
							    if (pause) return false;
							    if (level.isFinished()) {
							      display.clear();
							      if (andThen)
							        andThen(level.status);
							      return false;
							    }
							  }
							
							  addEventListener('keydown', e => {
							    if (e.keyCode == 27) {
							      pause = !pause;
							
							      if (!pause) runAnimation(step);
							    }
							  })
							
							  runAnimation(step);
							}
							
							function runGame(plans, Display) {
							  let lives = constants.player.startLivesCount;
							  let display = new Display(document.body);
							  display.showLives(lives);
							  trackKeys.listen();
							
							  function startLevel(n) {
							    display.showLevel(n);
							    display.showLives(lives);
							    runLevel(new Level(plans[n]), display, function(status) {
							      if (status == constants.statuses.lost) {
							        lives--;
							        if (lives == 0) {
							          console.log("You lose!");
							          lives = constants.player.startLivesCount;
							          startLevel(0);
							          return;
							        } 
							        startLevel(n);
							      } else if (n < plans.length - 1)
							        startLevel(n + 1);
							      else
							        console.log("You win!");
							        trackKeys.stop();
							    });
							  }
							  startLevel(0);
							}
							
							module.exports = runGame;
						}
					},
					"models": {
						"vector.js": function (exports, module, require) {
							class Vector {
							    constructor(x, y) {
							        this.x = x;
							        this.y = y;
							    }
							
							    plus(other) {
							        return new Vector(this.x + other.x, this.y + other.y);
							    }
							
							    times(factor) {
							        return new Vector(this.x * factor, this.y * factor);
							    }
							}
							
							module.exports = Vector;
						}
					}
				}
			}
		}
	}
})("eloquent-javascript/2-browser/15-platform-game/js/game/game");
